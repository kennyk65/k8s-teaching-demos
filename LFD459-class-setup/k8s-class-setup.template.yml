---
AWSTemplateFormatVersion: '2010-09-09'

# This creates EC2 instances to serve as classroom computers, 2 per student.
# You must have an existing VPC with at least two public subnets.
# You must have a keypair setup on the region you are running in.  You must distribute the PEM and PPK to students.
# TODO: CREATE KEYPAIR USING THIS:  https://github.com/binxio/cfn-secret-provider
# Tell the stack how many students you have.  Recommend setting up 1 or two extra.
# Recommend running this stack twice, the second time with the K8s software pre-installed.  That way if student environments get hosed you have backups.  You will need to find the "kubeadm join" command in ~/master.out
# TODO: AUTOMATIC SOFTWARE INSTALL DOESN'T WORK, RESULTS IN "error: no configuration has been provided, try setting KUBERNETES_MASTER environment variable"
# You must connect to the worker to run the kubeadm join command.  The command to run is emitted by the system log on the master.  This can be found on the master using "cat /var/log/cloud-init-output.log" or via console / Instance Settings / Get System Log

Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - VpcId
          - PublicSubnetId
          - RemoteAccessKeyName
      - Label:
          default: Classroom details
        Parameters:
          - NumberOfStudents
          - PreInstallK8sSoftware
          - AmiToUse


Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  PublicSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select one public subnets in your selected VPC.  K8s Master and Worker will run here.  (multiple subnets requires altering K8s software, so use a single subnet)
    
  RemoteAccessKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to instances

  NumberOfStudents:
    Type: Number
    Description: Number of students in your class.  Two instances will be created for each student.
    Default: 1

  PreInstallK8sSoftware:
    Type: String 
    AllowedValues:
    - true 
    - false 
    Default: false 
    Description:  Do you want the instances to be setup with K8s master and worker software?  You will still need to "Join" the worker to the master, find the "kubeadm join" command in ~/master.out

  AmiToUse:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/18.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: You probably won't need to change this value.  This is looking up the latest Ubuntu AMI using the Parameter Store...


Conditions:
  PreInstallK8s:  !Equals [ !Ref PreInstallK8sSoftware, True ] 

Resources:

  # Security Group for the instances in the cluster.  
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: K8sClusterSecurityGroup

  SGIngressWithinCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ClusterSecurityGroup.GroupId

  SGIngress80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  SGIngress22:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  # To allow 'NodePort' access from outside the cluster, we must allow random high ports:
  SGIngressNodePort:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 1024
      ToPort: 65535
      CidrIp: 0.0.0.0/0

  SGIngressPing:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0

  # TODO:  HOW TO SET THE SOURCE DEST CHECK???
  LaunchTemplateMaster:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-MasterTemplate
      LaunchTemplateData: 
        IamInstanceProfile: 
          Name: !Ref SSMInstanceProfile  # Allows EC2 Instance to talk with SSM
        ImageId: !Ref AmiToUse            # We lookup AMI using the AWS Systems Manager
        InstanceType: m5a.large             # 2 VCPU, 8 GB 
        KeyName: !Ref RemoteAccessKeyName     # Use the keypair from the input parameters
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnetId           # You have to specify a subnet in this launch template, but this will be ignored when using ASG.
          Groups: [!Ref ClusterSecurityGroup]       # Plug in the security group.
        InstanceMarketOptions: 
          MarketType: spot
        BlockDeviceMappings: 
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: 25
            VolumeType: gp2
        UserData:      
          Fn::Base64: !Sub |
            #!/bin/bash
            # SSM Agent is pre-installed, but we need a newer version to run bash;
            snap switch --channel=candidate amazon-ssm-agent
            snap refresh            
            echo ADD A USER CALLED student AND ALLOW SSH LOGIN
            echo This assumes we are using the same key pair that the instance was launched with.
            #useradd -d /home/student student
            adduser student  --disabled-password
            echo "student:lfd459" | sudo chpasswd
            usermod -aG sudo,ubuntu,adm,dialout,cdrom,floppy,audio,dip,video,plugdev,lxd,netdev student
            sudo echo "student ALL=(ALL) NOPASSWD: ALL" | (EDITOR="tee -a" visudo)
            echo ALLOW student USER TO LOGIN VIA SSH
            mkdir -p /home/student/.ssh
            chmod 700 /home/student/.ssh
            cp /home/ubuntu/.ssh/authorized_keys /home/student/.ssh/authorized_keys
            chmod 600 /home/student/.ssh/authorized_keys
            chown -R student:student /home/student
            echo GENERAL PACKAGE UPDATE
            apt-get update -y
            echo INSTALL PIP, PYTHON, AND PREPARE FOR SCRIPTING
            apt-get install python-pip -y
            pip install boto3 requests
            echo RUN A SCRIPT TO DISABLE SRC/DEST CHECK ON EC2 INSTANCES SINCE THERE IS NO WAY TO SET THIS IN CLOUDFORMATION.
            cat << EOF > /script.py
            import requests
            import boto3
            response = requests.get('http://169.254.169.254/latest/meta-data/instance-id')
            instance_id = response.text
            client = boto3.client('ec2', region_name='${AWS::Region}')
            response=client.modify_instance_attribute(
                SourceDestCheck={
                    'Value': False
                },
                InstanceId=instance_id
            )
            EOF
            python /script.py
            # SSM Agent for easy remote access is already installed.
            su - student
            cd /home/student
            # Install master node software:
            if [ ${PreInstallK8sSoftware} = true ]
            then
              wget https://training.linuxfoundation.org/cm/LFD459/LFD459_V1.18.1_SOLUTIONS.tar.bz2  --user=LFtraining --password=Penguin2014
              tar -xvf LFD459_V1.18.1_SOLUTIONS.tar.bz2
              find ~ -name k8sMaster.sh
              cp LFD459/SOLUTIONS/s_02/k8sMaster.sh .
              bash k8sMaster.sh | tee ~/master.out
              apt-get install bash-completion vim -y
              source <(kubectl completion bash)
              echo "source <(kubectl completion bash)" >> ~/.bashrc
              kubectl get node    
              kubectl describe nodes | grep -i Taint
              kubectl taint nodes --all node-role.kubernetes.io/master-
            fi            


  AppAutoScalingGroupMaster:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnetId ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateMaster
        Version: !GetAtt LaunchTemplateMaster.LatestVersionNumber  
      MinSize: 1
      MaxSize: !Ref NumberOfStudents
      DesiredCapacity: !Ref NumberOfStudents
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: MasterNode
        PropagateAtLaunch: true


  LaunchTemplateWorker:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-WorkerTemplate
      LaunchTemplateData: 
        IamInstanceProfile: 
          Name: !Ref SSMInstanceProfile  # Allows EC2 Instance to talk with SSM
        ImageId: !Ref AmiToUse            # We lookup AMI using the AWS Systems Manager
        InstanceType: m5a.large             # 2 VCPU, 8 GB 
        KeyName: !Ref RemoteAccessKeyName     # Use the keypair from the input parameters
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnetId           # You have to specify a subnet in this launch template, but this will be ignored when using ASG.
          Groups: [!Ref ClusterSecurityGroup]       # Plug in the security group.
        InstanceMarketOptions: 
          MarketType: spot
        BlockDeviceMappings: 
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: 25
            VolumeType: gp2
        UserData:      #  Install AWS Systems Manager:
          Fn::Base64: !Sub |
            #!/bin/bash
            # SSM Agent is pre-installed, but we need a newer version to run bash;
            snap switch --channel=candidate amazon-ssm-agent
            snap refresh            
            echo ADD A USER CALLED student AND ALLOW SSH LOGIN
            echo This assumes we are using the same key pair that the instance was launched with.
            #useradd -d /home/student student
            adduser student  --disabled-password
            echo "student:lfd459" | sudo chpasswd
            usermod -aG sudo,ubuntu,adm,dialout,cdrom,floppy,audio,dip,video,plugdev,lxd,netdev student
            sudo echo "student ALL=(ALL) NOPASSWD: ALL" | (EDITOR="tee -a" visudo)
            echo ALLOW student USER TO LOGIN VIA SSH
            mkdir -p /home/student/.ssh
            chmod 700 /home/student/.ssh
            cp /home/ubuntu/.ssh/authorized_keys /home/student/.ssh/authorized_keys
            chmod 600 /home/student/.ssh/authorized_keys
            chown -R student:student /home/student
            echo GENERAL PACKAGE UPDATE
            apt-get update -y
            echo INSTALL PIP, PYTHON, AND PREPARE FOR SCRIPTING
            apt-get install python-pip -y
            pip install boto3 requests
            echo RUN A SCRIPT TO DISABLE SRC/DEST CHECK ON EC2 INSTANCES SINCE THERE IS NO WAY TO SET THIS IN CLOUDFORMATION.
            cat << EOF > /script.py
            import requests
            import boto3
            response = requests.get('http://169.254.169.254/latest/meta-data/instance-id')
            instance_id = response.text
            client = boto3.client('ec2', region_name='${AWS::Region}')
            response=client.modify_instance_attribute(
                SourceDestCheck={
                    'Value': False
                },
                InstanceId=instance_id
            )
            EOF
            python /script.py
            # SSM Agent for easy remote access is already installed.
            su - student
            cd /home/student
            # Install worker node software:
            if [ ${PreInstallK8sSoftware} = true ]
            then
              echo INSTALLING WORKER NODE SOFTWARE
              wget https://training.linuxfoundation.org/cm/LFD459/LFD459_V1.18.1_SOLUTIONS.tar.bz2 --user=LFtraining --password=Penguin2014
              tar -xvf LFD459_V1.18.1_SOLUTIONS.tar.bz2
              find ~ -name k8sSecond.sh
              cp LFD459/SOLUTIONS/s_02/k8sSecond.sh .
              bash k8sSecond.sh
            fi            


  AppAutoScalingGroupWorker:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnetId ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateWorker 
        Version: !GetAtt LaunchTemplateWorker.LatestVersionNumber  
      MinSize: 1
      MaxSize: !Ref NumberOfStudents
      DesiredCapacity: !Ref NumberOfStudents
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: WorkerNode
        PropagateAtLaunch: true


      
  # Attach AmazonEC2RoleforSSM's permissions to each EC2 Instance in the ASG.
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref SSMRole]

  # Allow EC2 instance to make calls to SSM.
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-K8sNodePermissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - ec2:ModifyInstanceAttribute
            Resource: '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      # Note that any other policies required for the instance to do its job would be defined here as well.  


# # Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
# Outputs:
#   AppAutoScalingGroupName:
#     Description: Name of the Auto Scaling group
#     Value: !Ref AppAutoScalingGroup

