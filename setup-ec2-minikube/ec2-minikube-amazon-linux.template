---
AWSTemplateFormatVersion: '2010-09-09'

# This sets up minikube on an EC2 Amazon Linux instance.
# Note: There is a bit of unavoidable work you have to do after you connect to the instance,
# You must launch Docker and Minikube from a non-root user to avoid some issues:
#
# sudo usermod -aG docker $(whoami) && sudo newgrp docker
# su - ssm-user
# sudo systemctl start docker
# sudo systemctl enable docker
# minikube start
# alias k="kubectl"
#

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - VPC
          - PublicSubnet

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The web server will run here.


Resources:

  # Security Group for the web server.  Allow HTTP from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp   # open high order ports to accomodate NodePort services
        FromPort: 30000
        ToPort: 60000
        CidrIp: 0.0.0.0/0

  # Minikube Instance:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
      InstanceType: t3.large              # Minikube requires 2 vcpus, 2 GB memory, 20 GB volume.  t3.medium is usually fine.
      IamInstanceProfile: !Ref InstanceProfile     # Allows EC2 Instance to talk with SSM
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true            # We will need a public IP address
        SubnetId: !Ref PublicSubnet               # We should sit in a public subnet.
        GroupSet: [ !Ref WebServerSecurityGroup ] # Attach the security group
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
      Tags:
      - Key: Name
        Value: Minikube
      - Key: Instructions
        Value: See instructions at https://github.com/kennyk65/k8s-teaching-demos/blob/master/setup-ec2-minikube/ec2-minikube-amazon-linux.template
      UserData:      #  This code installs a Docker, Kubectl, Minicube, but does not start them.
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          echo Installing Docker 
          yum install -y docker 

          echo Install kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv kubectl /usr/local/bin/

          echo Install Minikube
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          install minikube-linux-amd64 /usr/local/bin/minikube

          echo installing crictl
          curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.22.0/crictl-v1.22.0-linux-amd64.tar.gz
          tar -zxvf crictl-v1.22.0-linux-amd64.tar.gz
          mv crictl /usr/local/bin/

          echo installing cri-dockerd
          curl -LO https://github.com/Mirantis/cri-dockerd/releases/download/v1.2.3/cri-dockerd-1.2.3-linux-amd64
          mv cri-dockerd-1.2.3-linux-amd64 /usr/local/bin/cri-dockerd
          chmod +x /usr/local/bin/cri-dockerd

          echo installing conntrack
          yum install -y conntrack

          echo installing cni-plugins
          yum install -y cni-plugins

          # echo installing 
          # echo installing CNI Plugin
          # CNI_PLUGIN_VERSION="1.4.0"
          # CNI_PLUGIN_TAR="cni-plugins-linux-amd64-$CNI_PLUGIN_VERSION.tgz" # change arch if not on amd64
          # CNI_PLUGIN_INSTALL_DIR="/opt/cni/bin"

          # curl -LO "https://github.com/containernetworking/plugins/releases/download/$CNI_PLUGIN_VERSION/$CNI_PLUGIN_TAR"
          # sudo mkdir -p "$CNI_PLUGIN_INSTALL_DIR"
          # sudo tar -xf "$CNI_PLUGIN_TAR" -C "$CNI_PLUGIN_INSTALL_DIR"
          # rm "$CNI_PLUGIN_TAR"

          # echo install cri-o
          # yum install -y yum-utils device-mapper-persistent-data lvm2
          # yum-config-manager --add-repo=https://cbs.centos.org/repos/paas7-crio-113-candidate/x86_64/os/
          # yum install -y cri-o

          echo install cri-o
          yum install -y libseccomp libassuan device-mapper-libs
          curl -L -o /usr/local/bin/crio https://github.com/cri-o/cri-o/releases/download/v1.22.3/crio-v1.22.3-amd64
          chmod +x /usr/local/bin/crio

          # echo starting cri-o
          # systemctl start crio
          # systemctl enable crio

          # echo starting docker
          # systemctl start docker
          # systemctl enable docker

          # echo starting minikube
          # minikube start --driver=none

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - ec2RoleForSsm     # Should be existing role

Outputs:

  SessionManagerLink:
    Description: Access Minikube instance via web browser
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${EC2Instance}?region=${AWS::Region}#  

